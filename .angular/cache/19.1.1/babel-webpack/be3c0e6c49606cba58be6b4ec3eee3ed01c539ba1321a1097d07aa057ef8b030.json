{"ast":null,"code":"import { takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, ViewContainerRef, NgZone, Injector, afterNextRender, Directive, Input, ChangeDetectorRef, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { DOCUMENT, NgClass } from '@angular/common';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, ScrollDispatcher, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst _c0 = [\"tooltip\"];\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    const overlay = inject(Overlay);\n    return () => overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n  }\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition({\n    scrollThrottle: SCROLL_THROTTLE_MS\n  });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n// These constants were taken from MDC's `numbers` object. We can't import them from MDC,\n// because they have some top-level references to `window` which break during SSR.\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\nconst UNBOUNDED_ANCHOR_GAP = 8;\nconst MIN_HEIGHT = 24;\nconst MAX_WIDTH = 200;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n  _overlay = inject(Overlay);\n  _elementRef = inject(ElementRef);\n  _scrollDispatcher = inject(ScrollDispatcher);\n  _viewContainerRef = inject(ViewContainerRef);\n  _ngZone = inject(NgZone);\n  _platform = inject(Platform);\n  _ariaDescriber = inject(AriaDescriber);\n  _focusMonitor = inject(FocusMonitor);\n  _dir = inject(Directionality);\n  _injector = inject(Injector);\n  _defaultOptions = inject(MAT_TOOLTIP_DEFAULT_OPTIONS, {\n    optional: true\n  });\n  _overlayRef;\n  _tooltipInstance;\n  _portal;\n  _position = 'below';\n  _positionAtOrigin = false;\n  _disabled = false;\n  _tooltipClass;\n  _scrollStrategy = inject(MAT_TOOLTIP_SCROLL_STRATEGY);\n  _viewInitialized = false;\n  _pointerExitEventsInitialized = false;\n  _tooltipComponent = TooltipComponent;\n  _viewportMargin = 8;\n  _currentPosition;\n  _cssClassPrefix = 'mat-mdc';\n  _ariaDescriptionPending;\n  _dirSubscribed = false;\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    if (value !== this._position) {\n      this._position = value;\n      if (this._overlayRef) {\n        this._updatePosition(this._overlayRef);\n        this._tooltipInstance?.show(0);\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  /**\n   * Whether tooltip should be relative to the click or touch origin\n   * instead of outside the element bounding box.\n   */\n  get positionAtOrigin() {\n    return this._positionAtOrigin;\n  }\n  set positionAtOrigin(value) {\n    this._positionAtOrigin = coerceBooleanProperty(value);\n    this._detach();\n    this._overlayRef = null;\n  }\n  /** Disables the display of the tooltip. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    const isDisabled = coerceBooleanProperty(value);\n    if (this._disabled !== isDisabled) {\n      this._disabled = isDisabled;\n      // If tooltip is disabled, hide immediately.\n      if (isDisabled) {\n        this.hide(0);\n      } else {\n        this._setupPointerEnterEventsIfNeeded();\n      }\n      this._syncAriaDescription(this.message);\n    }\n  }\n  /** The default delay in ms before showing the tooltip after show is called */\n  get showDelay() {\n    return this._showDelay;\n  }\n  set showDelay(value) {\n    this._showDelay = coerceNumberProperty(value);\n  }\n  _showDelay;\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  get hideDelay() {\n    return this._hideDelay;\n  }\n  set hideDelay(value) {\n    this._hideDelay = coerceNumberProperty(value);\n    if (this._tooltipInstance) {\n      this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n    }\n  }\n  _hideDelay;\n  /**\n   * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n   * uses a long press gesture to show and hide, however it can conflict with the native browser\n   * gestures. To work around the conflict, Angular Material disables native gestures on the\n   * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n   * elements). The different values for this option configure the touch event handling as follows:\n   * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n   *   browser gestures on particular elements. In particular, it allows text selection on inputs\n   *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n   * - `on` - Enables touch gestures for all elements and disables native\n   *   browser gestures with no exceptions.\n   * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n   *   showing on touch devices.\n   */\n  touchGestures = 'auto';\n  /** The message to be displayed in the tooltip */\n  get message() {\n    return this._message;\n  }\n  set message(value) {\n    const oldMessage = this._message;\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n    // away the string-conversion: https://github.com/angular/components/issues/20684\n    this._message = value != null ? String(value).trim() : '';\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n      this._updateTooltipMessage();\n    }\n    this._syncAriaDescription(oldMessage);\n  }\n  _message = '';\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n  /** Manually-bound passive event listeners. */\n  _passiveListeners = [];\n  /** Reference to the current document. */\n  _document = inject(DOCUMENT);\n  /** Timer started at the last `touchstart` event. */\n  _touchstartTimeout = null;\n  /** Emits when the component is destroyed. */\n  _destroyed = new Subject();\n  /** Whether ngOnDestroyed has been called. */\n  _isDestroyed = false;\n  constructor() {\n    const defaultOptions = this._defaultOptions;\n    if (defaultOptions) {\n      this._showDelay = defaultOptions.showDelay;\n      this._hideDelay = defaultOptions.hideDelay;\n      if (defaultOptions.position) {\n        this.position = defaultOptions.position;\n      }\n      if (defaultOptions.positionAtOrigin) {\n        this.positionAtOrigin = defaultOptions.positionAtOrigin;\n      }\n      if (defaultOptions.touchGestures) {\n        this.touchGestures = defaultOptions.touchGestures;\n      }\n      if (defaultOptions.tooltipClass) {\n        this.tooltipClass = defaultOptions.tooltipClass;\n      }\n    }\n    this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n  }\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._viewInitialized = true;\n    this._setupPointerEnterEventsIfNeeded();\n    this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        this._ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        this._ngZone.run(() => this.show());\n      }\n    });\n  }\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n    // Optimization: Do not call clearTimeout unless there is an active timer.\n    if (this._touchstartTimeout) {\n      clearTimeout(this._touchstartTimeout);\n    }\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n    // Clean up the event listeners set in the constructor\n    this._passiveListeners.forEach(([event, listener]) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n    this._passiveListeners.length = 0;\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n    this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay = this.showDelay, origin) {\n    if (this.disabled || !this.message || this._isTooltipVisible()) {\n      this._tooltipInstance?._cancelPendingAnimations();\n      return;\n    }\n    const overlayRef = this._createOverlay(origin);\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n    const instance = this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    instance._triggerElement = this._elementRef.nativeElement;\n    instance._mouseLeaveHideDelay = this._hideDelay;\n    instance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    instance.show(delay);\n  }\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay = this.hideDelay) {\n    const instance = this._tooltipInstance;\n    if (instance) {\n      if (instance.isVisible()) {\n        instance.hide(delay);\n      } else {\n        instance._cancelPendingAnimations();\n        this._detach();\n      }\n    }\n  }\n  /** Shows/hides the tooltip */\n  toggle(origin) {\n    this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\n  }\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /** Create the overlay config and position strategy */\n  _createOverlay(origin) {\n    if (this._overlayRef) {\n      const existingStrategy = this._overlayRef.getConfig().positionStrategy;\n      if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\n        return this._overlayRef;\n      }\n      this._detach();\n    }\n    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position().flexibleConnectedTo(this.positionAtOrigin ? origin || this._elementRef : this._elementRef).withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`).withFlexibleDimensions(false).withViewportMargin(this._viewportMargin).withScrollableContainers(scrollableAncestors);\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      this._updateCurrentPositionClass(change.connectionPair);\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n      scrollStrategy: this._scrollStrategy()\n    });\n    this._updatePosition(this._overlayRef);\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n    this._overlayRef.outsidePointerEvents().pipe(takeUntil(this._destroyed)).subscribe(() => this._tooltipInstance?._handleBodyInteraction());\n    this._overlayRef.keydownEvents().pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        event.stopPropagation();\n        this._ngZone.run(() => this.hide(0));\n      }\n    });\n    if (this._defaultOptions?.disableTooltipInteractivity) {\n      this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n    }\n    if (!this._dirSubscribed) {\n      this._dirSubscribed = true;\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._overlayRef) {\n          this._updatePosition(this._overlayRef);\n        }\n      });\n    }\n    return this._overlayRef;\n  }\n  /** Detaches the currently-attached tooltip. */\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n    this._tooltipInstance = null;\n  }\n  /** Updates the position of the current tooltip. */\n  _updatePosition(overlayRef) {\n    const position = overlayRef.getConfig().positionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    position.withPositions([this._addOffset({\n      ...origin.main,\n      ...overlay.main\n    }), this._addOffset({\n      ...origin.fallback,\n      ...overlay.fallback\n    })]);\n  }\n  /** Adds the configured offset to a position. Used as a hook for child classes. */\n  _addOffset(position) {\n    const offset = UNBOUNDED_ANCHOR_GAP;\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    if (position.originY === 'top') {\n      position.offsetY = -offset;\n    } else if (position.originY === 'bottom') {\n      position.offsetY = offset;\n    } else if (position.originX === 'start') {\n      position.offsetX = isLtr ? -offset : offset;\n    } else if (position.originX === 'end') {\n      position.offsetX = isLtr ? offset : -offset;\n    }\n    return position;\n  }\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition;\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition;\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n      afterNextRender(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef.updatePosition();\n        }\n      }, {\n        injector: this._injector\n      });\n    }\n  }\n  /** Updates the tooltip class */\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /** Inverts an overlay position. */\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the class on the overlay panel based on the current position of the tooltip. */\n  _updateCurrentPositionClass(connectionPair) {\n    const {\n      overlayY,\n      originX,\n      originY\n    } = connectionPair;\n    let newPosition;\n    // If the overlay is in the middle along the Y axis,\n    // it means that it's either before or after.\n    if (overlayY === 'center') {\n      // Note that since this information is used for styling, we want to\n      // resolve `start` and `end` to their real values, otherwise consumers\n      // would have to remember to do it themselves on each consumption.\n      if (this._dir && this._dir.value === 'rtl') {\n        newPosition = originX === 'end' ? 'left' : 'right';\n      } else {\n        newPosition = originX === 'start' ? 'left' : 'right';\n      }\n    } else {\n      newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n    }\n    if (newPosition !== this._currentPosition) {\n      const overlayRef = this._overlayRef;\n      if (overlayRef) {\n        const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n        overlayRef.removePanelClass(classPrefix + this._currentPosition);\n        overlayRef.addPanelClass(classPrefix + newPosition);\n      }\n      this._currentPosition = newPosition;\n    }\n  }\n  /** Binds the pointer events to the tooltip trigger. */\n  _setupPointerEnterEventsIfNeeded() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n      return;\n    }\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (this._platformSupportsMouseEvents()) {\n      this._passiveListeners.push(['mouseenter', event => {\n        this._setupPointerExitEventsIfNeeded();\n        let point = undefined;\n        if (event.x !== undefined && event.y !== undefined) {\n          point = event;\n        }\n        this.show(undefined, point);\n      }]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      this._passiveListeners.push(['touchstart', event => {\n        const touch = event.targetTouches?.[0];\n        const origin = touch ? {\n          x: touch.clientX,\n          y: touch.clientY\n        } : undefined;\n        // Note that it's important that we don't `preventDefault` here,\n        // because it can prevent click events from firing on the element.\n        this._setupPointerExitEventsIfNeeded();\n        if (this._touchstartTimeout) {\n          clearTimeout(this._touchstartTimeout);\n        }\n        const DEFAULT_LONGPRESS_DELAY = 500;\n        this._touchstartTimeout = setTimeout(() => {\n          this._touchstartTimeout = null;\n          this.show(undefined, origin);\n        }, this._defaultOptions?.touchLongPressShowDelay ?? DEFAULT_LONGPRESS_DELAY);\n      }]);\n    }\n    this._addListeners(this._passiveListeners);\n  }\n  _setupPointerExitEventsIfNeeded() {\n    if (this._pointerExitEventsInitialized) {\n      return;\n    }\n    this._pointerExitEventsInitialized = true;\n    const exitListeners = [];\n    if (this._platformSupportsMouseEvents()) {\n      exitListeners.push(['mouseleave', event => {\n        const newTarget = event.relatedTarget;\n        if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {\n          this.hide();\n        }\n      }], ['wheel', event => this._wheelListener(event)]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      const touchendListener = () => {\n        if (this._touchstartTimeout) {\n          clearTimeout(this._touchstartTimeout);\n        }\n        this.hide(this._defaultOptions?.touchendHideDelay);\n      };\n      exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n    }\n    this._addListeners(exitListeners);\n    this._passiveListeners.push(...exitListeners);\n  }\n  _addListeners(listeners) {\n    listeners.forEach(([event, listener]) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n  _platformSupportsMouseEvents() {\n    return !this._platform.IOS && !this._platform.ANDROID;\n  }\n  /** Listener for the `wheel` event on the element. */\n  _wheelListener(event) {\n    if (this._isTooltipVisible()) {\n      const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n      const element = this._elementRef.nativeElement;\n      // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n      // won't fire if the user scrolls away using the wheel without moving their cursor. We\n      // work around it by finding the element under the user's cursor and closing the tooltip\n      // if it's not the trigger.\n      if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n        this.hide();\n      }\n    }\n  }\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n  _disableNativeGesturesIfNecessary() {\n    const gestures = this.touchGestures;\n    if (gestures !== 'off') {\n      const element = this._elementRef.nativeElement;\n      const style = element.style;\n      // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n      if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n        style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';\n      }\n      // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n      if (gestures === 'on' || !element.draggable) {\n        style.webkitUserDrag = 'none';\n      }\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n  /** Updates the tooltip's ARIA description based on it current state. */\n  _syncAriaDescription(oldMessage) {\n    if (this._ariaDescriptionPending) {\n      return;\n    }\n    this._ariaDescriptionPending = true;\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, oldMessage, 'tooltip');\n    // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n    // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n    // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n    // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n    if (!this._isDestroyed) {\n      afterNextRender({\n        write: () => {\n          this._ariaDescriptionPending = false;\n          if (this.message && !this.disabled) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n          }\n        }\n      }, {\n        injector: this._injector\n      });\n    }\n  }\n  static ɵfac = function MatTooltip_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatTooltip)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatTooltip,\n    selectors: [[\"\", \"matTooltip\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-tooltip-trigger\"],\n    hostVars: 2,\n    hostBindings: function MatTooltip_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-mdc-tooltip-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      position: [0, \"matTooltipPosition\", \"position\"],\n      positionAtOrigin: [0, \"matTooltipPositionAtOrigin\", \"positionAtOrigin\"],\n      disabled: [0, \"matTooltipDisabled\", \"disabled\"],\n      showDelay: [0, \"matTooltipShowDelay\", \"showDelay\"],\n      hideDelay: [0, \"matTooltipHideDelay\", \"hideDelay\"],\n      touchGestures: [0, \"matTooltipTouchGestures\", \"touchGestures\"],\n      message: [0, \"matTooltip\", \"message\"],\n      tooltipClass: [0, \"matTooltipClass\", \"tooltipClass\"]\n    },\n    exportAs: [\"matTooltip\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        'class': 'mat-mdc-tooltip-trigger',\n        '[class.mat-mdc-tooltip-disabled]': 'disabled'\n      }\n    }]\n  }], () => [], {\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    positionAtOrigin: [{\n      type: Input,\n      args: ['matTooltipPositionAtOrigin']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent {\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _elementRef = inject(ElementRef);\n  /* Whether the tooltip text overflows to multiple lines */\n  _isMultiline = false;\n  /** Message to display in the tooltip */\n  message;\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass;\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId;\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId;\n  /** Element that caused the tooltip to open. */\n  _triggerElement;\n  /** Amount of milliseconds to delay the closing sequence. */\n  _mouseLeaveHideDelay;\n  /** Whether animations are currently disabled. */\n  _animationsDisabled;\n  /** Reference to the internal tooltip element. */\n  _tooltip;\n  /** Whether interactions on the page should close the tooltip */\n  _closeOnInteraction = false;\n  /** Whether the tooltip is currently visible. */\n  _isVisible = false;\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  _onHide = new Subject();\n  /** Name of the show animation and the class that toggles it. */\n  _showAnimation = 'mat-mdc-tooltip-show';\n  /** Name of the hide animation and the class that toggles it. */\n  _hideAnimation = 'mat-mdc-tooltip-hide';\n  constructor() {\n    const animationMode = inject(ANIMATION_MODULE_TYPE, {\n      optional: true\n    });\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId != null) {\n      clearTimeout(this._hideTimeoutId);\n    }\n    this._showTimeoutId = setTimeout(() => {\n      this._toggleVisibility(true);\n      this._showTimeoutId = undefined;\n    }, delay);\n  }\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId != null) {\n      clearTimeout(this._showTimeoutId);\n    }\n    this._hideTimeoutId = setTimeout(() => {\n      this._toggleVisibility(false);\n      this._hideTimeoutId = undefined;\n    }, delay);\n  }\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden() {\n    return this._onHide;\n  }\n  /** Whether the tooltip is being displayed. */\n  isVisible() {\n    return this._isVisible;\n  }\n  ngOnDestroy() {\n    this._cancelPendingAnimations();\n    this._onHide.complete();\n    this._triggerElement = null;\n  }\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n  _handleMouseLeave({\n    relatedTarget\n  }) {\n    if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n      if (this.isVisible()) {\n        this.hide(this._mouseLeaveHideDelay);\n      } else {\n        this._finalizeAnimation(false);\n      }\n    }\n  }\n  /**\n   * Callback for when the timeout in this.show() gets completed.\n   * This method is only needed by the mdc-tooltip, and so it is only implemented\n   * in the mdc-tooltip, not here.\n   */\n  _onShow() {\n    this._isMultiline = this._isTooltipMultiline();\n    this._markForCheck();\n  }\n  /** Whether the tooltip text has overflown to the next line */\n  _isTooltipMultiline() {\n    const rect = this._elementRef.nativeElement.getBoundingClientRect();\n    return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\n  }\n  /** Event listener dispatched when an animation on the tooltip finishes. */\n  _handleAnimationEnd({\n    animationName\n  }) {\n    if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n      this._finalizeAnimation(animationName === this._showAnimation);\n    }\n  }\n  /** Cancels any pending animation sequences. */\n  _cancelPendingAnimations() {\n    if (this._showTimeoutId != null) {\n      clearTimeout(this._showTimeoutId);\n    }\n    if (this._hideTimeoutId != null) {\n      clearTimeout(this._hideTimeoutId);\n    }\n    this._showTimeoutId = this._hideTimeoutId = undefined;\n  }\n  /** Handles the cleanup after an animation has finished. */\n  _finalizeAnimation(toVisible) {\n    if (toVisible) {\n      this._closeOnInteraction = true;\n    } else if (!this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n  /** Toggles the visibility of the tooltip element. */\n  _toggleVisibility(isVisible) {\n    // We set the classes directly here ourselves so that toggling the tooltip state\n    // isn't bound by change detection. This allows us to hide it even if the\n    // view ref has been detached from the CD tree.\n    const tooltip = this._tooltip.nativeElement;\n    const showClass = this._showAnimation;\n    const hideClass = this._hideAnimation;\n    tooltip.classList.remove(isVisible ? hideClass : showClass);\n    tooltip.classList.add(isVisible ? showClass : hideClass);\n    if (this._isVisible !== isVisible) {\n      this._isVisible = isVisible;\n      this._changeDetectorRef.markForCheck();\n    }\n    // It's common for internal apps to disable animations using `* { animation: none !important }`\n    // which can break the opening sequence. Try to detect such cases and work around them.\n    if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n      const styles = getComputedStyle(tooltip);\n      // Use `getPropertyValue` to avoid issues with property renaming.\n      if (styles.getPropertyValue('animation-duration') === '0s' || styles.getPropertyValue('animation-name') === 'none') {\n        this._animationsDisabled = true;\n      }\n    }\n    if (isVisible) {\n      this._onShow();\n    }\n    if (this._animationsDisabled) {\n      tooltip.classList.add('_mat-animation-noopable');\n      this._finalizeAnimation(isVisible);\n    }\n  }\n  static ɵfac = function TooltipComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TooltipComponent)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TooltipComponent,\n    selectors: [[\"mat-tooltip-component\"]],\n    viewQuery: function TooltipComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tooltip = _t.first);\n      }\n    },\n    hostAttrs: [\"aria-hidden\", \"true\"],\n    hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mouseleave\", function TooltipComponent_mouseleave_HostBindingHandler($event) {\n          return ctx._handleMouseLeave($event);\n        });\n      }\n    },\n    decls: 4,\n    vars: 4,\n    consts: [[\"tooltip\", \"\"], [1, \"mdc-tooltip\", \"mat-mdc-tooltip\", 3, \"animationend\", \"ngClass\"], [1, \"mat-mdc-tooltip-surface\", \"mdc-tooltip__surface\"]],\n    template: function TooltipComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 1, 0);\n        i0.ɵɵlistener(\"animationend\", function TooltipComponent_Template_div_animationend_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx._handleAnimationEnd($event));\n        });\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mdc-tooltip--multiline\", ctx._isMultiline);\n        i0.ɵɵproperty(\"ngClass\", ctx.tooltipClass);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    dependencies: [NgClass],\n    styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mdc-plain-tooltip-container-color, var(--mat-sys-inverse-surface));color:var(--mdc-plain-tooltip-supporting-text-color, var(--mat-sys-inverse-on-surface));border-radius:var(--mdc-plain-tooltip-container-shape, var(--mat-sys-corner-extra-small));font-family:var(--mdc-plain-tooltip-supporting-text-font, var(--mat-sys-body-small-font));font-size:var(--mdc-plain-tooltip-supporting-text-size, var(--mat-sys-body-small-size));font-weight:var(--mdc-plain-tooltip-supporting-text-weight, var(--mat-sys-body-small-weight));line-height:var(--mdc-plain-tooltip-supporting-text-line-height, var(--mat-sys-body-small-line-height));letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, var(--mat-sys-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel{line-height:normal}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '(mouseleave)': '_handleMouseLeave($event)',\n        'aria-hidden': 'true'\n      },\n      imports: [NgClass],\n      template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mat-mdc-tooltip-surface mdc-tooltip__surface\\\">{{message}}</div>\\n</div>\\n\",\n      styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mdc-plain-tooltip-container-color, var(--mat-sys-inverse-surface));color:var(--mdc-plain-tooltip-supporting-text-color, var(--mat-sys-inverse-on-surface));border-radius:var(--mdc-plain-tooltip-container-shape, var(--mat-sys-corner-extra-small));font-family:var(--mdc-plain-tooltip-supporting-text-font, var(--mat-sys-body-small-font));font-size:var(--mdc-plain-tooltip-supporting-text-size, var(--mat-sys-body-small-size));font-weight:var(--mdc-plain-tooltip-supporting-text-weight, var(--mat-sys-body-small-weight));line-height:var(--mdc-plain-tooltip-supporting-text-line-height, var(--mat-sys-body-small-line-height));letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, var(--mat-sys-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel{line-height:normal}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"]\n    }]\n  }], () => [], {\n    _tooltip: [{\n      type: ViewChild,\n      args: ['tooltip', {\n        // Use a static query here since we interact directly with\n        // the DOM which can happen before `ngAfterViewInit`.\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n * @deprecated No longer being used, to be removed.\n * @breaking-change 21.0.0\n */\nconst matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n  // TODO(crisbeto): these values are based on MDC's CSS.\n  // We should be able to use their styles directly once we land #19432.\n  state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => hidden', animate('75ms cubic-bezier(0.4, 0, 1, 1)'))])\n};\nclass MatTooltipModule {\n  static ɵfac = function MatTooltipModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatTooltipModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatTooltipModule,\n    imports: [A11yModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent],\n    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [A11yModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":{"version":3,"names":["takeUntil","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","i0","InjectionToken","inject","ElementRef","ViewContainerRef","NgZone","Injector","afterNextRender","Directive","Input","ChangeDetectorRef","ANIMATION_MODULE_TYPE","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","DOCUMENT","NgClass","normalizePassiveListenerOptions","Platform","AriaDescriber","FocusMonitor","A11yModule","Directionality","Overlay","ScrollDispatcher","OverlayModule","ComponentPortal","Subject","trigger","state","style","transition","animate","CdkScrollableModule","MatCommonModule","_c0","SCROLL_THROTTLE_MS","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","providedIn","factory","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MAT_TOOLTIP_DEFAULT_OPTIONS","TOOLTIP_PANEL_CLASS","PANEL_CLASS","passiveListenerOptions","passive","MIN_VIEWPORT_TOOLTIP_THRESHOLD","UNBOUNDED_ANCHOR_GAP","MIN_HEIGHT","MAX_WIDTH","MatTooltip","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","_dir","_injector","_defaultOptions","optional","_overlayRef","_tooltipInstance","_portal","_position","_positionAtOrigin","_disabled","_tooltipClass","_scrollStrategy","_viewInitialized","_pointerExitEventsInitialized","_tooltipComponent","TooltipComponent","_viewportMargin","_currentPosition","_cssClassPrefix","_ariaDescriptionPending","_dirSubscribed","value","_updatePosition","show","updatePosition","positionAtOrigin","_detach","disabled","isDisabled","hide","_setupPointerEnterEventsIfNeeded","_syncAriaDescription","message","_showDelay","_hideDelay","_mouseLeaveHideDelay","touchGestures","_message","oldMessage","String","trim","_isTooltipVisible","_updateTooltipMessage","tooltipClass","_setTooltipClass","_passiveListeners","_document","_touchstartTimeout","_destroyed","_isDestroyed","constructor","defaultOptions","ngAfterViewInit","monitor","pipe","subscribe","origin","run","ngOnDestroy","nativeElement","clearTimeout","dispose","forEach","event","listener","removeEventListener","length","next","complete","removeDescription","stopMonitoring","delay","_cancelPendingAnimations","overlayRef","_createOverlay","instance","attach","_triggerElement","afterHidden","isVisible","toggle","undefined","existingStrategy","getConfig","positionStrategy","_origin","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","change","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","panelClass","scrollStrategy","detachments","outsidePointerEvents","_handleBodyInteraction","keydownEvents","keyCode","preventDefault","stopPropagation","disableTooltipInteractivity","addPanelClass","hasAttached","detach","_getOrigin","_getOverlayPosition","withPositions","_addOffset","main","fallback","offset","isLtr","originY","offsetY","originX","offsetX","originPosition","ngDevMode","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","injector","newPosition","classPrefix","removePanelClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","point","_disableNativeGesturesIfNecessary","touch","targetTouches","clientX","clientY","DEFAULT_LONGPRESS_DELAY","setTimeout","touchLongPressShowDelay","_addListeners","exitListeners","newTarget","relatedTarget","overlayElement","contains","_wheelListener","touchendListener","listeners","addEventListener","IOS","ANDROID","elementUnderPointer","elementFromPoint","element","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","write","describe","ɵfac","MatTooltip_Factory","__ngFactoryType__","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatTooltip_HostBindings","rf","ctx","ɵɵclassProp","inputs","exportAs","ɵsetClassMetadata","args","selector","host","_changeDetectorRef","_isMultiline","_showTimeoutId","_hideTimeoutId","_animationsDisabled","_tooltip","_closeOnInteraction","_isVisible","_onHide","_showAnimation","_hideAnimation","animationMode","_toggleVisibility","markForCheck","_handleMouseLeave","_finalizeAnimation","_onShow","_isTooltipMultiline","rect","getBoundingClientRect","height","width","_handleAnimationEnd","animationName","toVisible","tooltip","showClass","hideClass","classList","remove","add","getComputedStyle","styles","getPropertyValue","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","TooltipComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","TooltipComponent_HostBindings","ɵɵlistener","TooltipComponent_mouseleave_HostBindingHandler","$event","decls","vars","consts","template","TooltipComponent_Template","_r1","ɵɵgetCurrentView","ɵɵelementStart","TooltipComponent_Template_div_animationend_0_listener","ɵɵrestoreView","ɵɵresetView","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","dependencies","encapsulation","changeDetection","None","OnPush","imports","static","matTooltipAnimations","tooltipState","opacity","transform","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","exports","ɵinj","ɵɵdefineInjector","providers"],"sources":["C:/Users/Elisinha/Documents/app_receitas/Site_Sobremesas/Site_Sobremesas/node_modules/@angular/material/fesm2022/tooltip.mjs"],"sourcesContent":["import { takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, ViewContainerRef, NgZone, Injector, afterNextRender, Directive, Input, ChangeDetectorRef, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { DOCUMENT, NgClass } from '@angular/common';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, ScrollDispatcher, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n    },\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// These constants were taken from MDC's `numbers` object. We can't import them from MDC,\n// because they have some top-level references to `window` which break during SSR.\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\nconst UNBOUNDED_ANCHOR_GAP = 8;\nconst MIN_HEIGHT = 24;\nconst MAX_WIDTH = 200;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    _overlay = inject(Overlay);\n    _elementRef = inject(ElementRef);\n    _scrollDispatcher = inject(ScrollDispatcher);\n    _viewContainerRef = inject(ViewContainerRef);\n    _ngZone = inject(NgZone);\n    _platform = inject(Platform);\n    _ariaDescriber = inject(AriaDescriber);\n    _focusMonitor = inject(FocusMonitor);\n    _dir = inject(Directionality);\n    _injector = inject(Injector);\n    _defaultOptions = inject(MAT_TOOLTIP_DEFAULT_OPTIONS, {\n        optional: true,\n    });\n    _overlayRef;\n    _tooltipInstance;\n    _portal;\n    _position = 'below';\n    _positionAtOrigin = false;\n    _disabled = false;\n    _tooltipClass;\n    _scrollStrategy = inject(MAT_TOOLTIP_SCROLL_STRATEGY);\n    _viewInitialized = false;\n    _pointerExitEventsInitialized = false;\n    _tooltipComponent = TooltipComponent;\n    _viewportMargin = 8;\n    _currentPosition;\n    _cssClassPrefix = 'mat-mdc';\n    _ariaDescriptionPending;\n    _dirSubscribed = false;\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                this._tooltipInstance?.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /**\n     * Whether tooltip should be relative to the click or touch origin\n     * instead of outside the element bounding box.\n     */\n    get positionAtOrigin() {\n        return this._positionAtOrigin;\n    }\n    set positionAtOrigin(value) {\n        this._positionAtOrigin = coerceBooleanProperty(value);\n        this._detach();\n        this._overlayRef = null;\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        const isDisabled = coerceBooleanProperty(value);\n        if (this._disabled !== isDisabled) {\n            this._disabled = isDisabled;\n            // If tooltip is disabled, hide immediately.\n            if (isDisabled) {\n                this.hide(0);\n            }\n            else {\n                this._setupPointerEnterEventsIfNeeded();\n            }\n            this._syncAriaDescription(this.message);\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    _showDelay;\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    _hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     */\n    touchGestures = 'auto';\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        const oldMessage = this._message;\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n        }\n        this._syncAriaDescription(oldMessage);\n    }\n    _message = '';\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    /** Manually-bound passive event listeners. */\n    _passiveListeners = [];\n    /** Reference to the current document. */\n    _document = inject(DOCUMENT);\n    /** Timer started at the last `touchstart` event. */\n    _touchstartTimeout = null;\n    /** Emits when the component is destroyed. */\n    _destroyed = new Subject();\n    /** Whether ngOnDestroyed has been called. */\n    _isDestroyed = false;\n    constructor() {\n        const defaultOptions = this._defaultOptions;\n        if (defaultOptions) {\n            this._showDelay = defaultOptions.showDelay;\n            this._hideDelay = defaultOptions.hideDelay;\n            if (defaultOptions.position) {\n                this.position = defaultOptions.position;\n            }\n            if (defaultOptions.positionAtOrigin) {\n                this.positionAtOrigin = defaultOptions.positionAtOrigin;\n            }\n            if (defaultOptions.touchGestures) {\n                this.touchGestures = defaultOptions.touchGestures;\n            }\n            if (defaultOptions.tooltipClass) {\n                this.tooltipClass = defaultOptions.tooltipClass;\n            }\n        }\n        this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        // Optimization: Do not call clearTimeout unless there is an active timer.\n        if (this._touchstartTimeout) {\n            clearTimeout(this._touchstartTimeout);\n        }\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._isDestroyed = true;\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay, origin) {\n        if (this.disabled || !this.message || this._isTooltipVisible()) {\n            this._tooltipInstance?._cancelPendingAnimations();\n            return;\n        }\n        const overlayRef = this._createOverlay(origin);\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        const instance = this._tooltipInstance;\n        if (instance) {\n            if (instance.isVisible()) {\n                instance.hide(delay);\n            }\n            else {\n                instance._cancelPendingAnimations();\n                this._detach();\n            }\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle(origin) {\n        this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay(origin) {\n        if (this._overlayRef) {\n            const existingStrategy = this._overlayRef.getConfig()\n                .positionStrategy;\n            if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\n                return this._overlayRef;\n            }\n            this._detach();\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this.positionAtOrigin ? origin || this._elementRef : this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._tooltipInstance?._handleBodyInteraction());\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if (this._defaultOptions?.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        if (!this._dirSubscribed) {\n            this._dirSubscribed = true;\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (this._overlayRef) {\n                    this._updatePosition(this._overlayRef);\n                }\n            });\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset({ ...origin.main, ...overlay.main }),\n            this._addOffset({ ...origin.fallback, ...overlay.fallback }),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        const offset = UNBOUNDED_ANCHOR_GAP;\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        if (position.originY === 'top') {\n            position.offsetY = -offset;\n        }\n        else if (position.originY === 'bottom') {\n            position.offsetY = offset;\n        }\n        else if (position.originX === 'start') {\n            position.offsetX = isLtr ? -offset : offset;\n        }\n        else if (position.originX === 'end') {\n            position.offsetX = isLtr ? offset : -offset;\n        }\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            afterNextRender(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            }, {\n                injector: this._injector,\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                event => {\n                    this._setupPointerExitEventsIfNeeded();\n                    let point = undefined;\n                    if (event.x !== undefined && event.y !== undefined) {\n                        point = event;\n                    }\n                    this.show(undefined, point);\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                event => {\n                    const touch = event.targetTouches?.[0];\n                    const origin = touch ? { x: touch.clientX, y: touch.clientY } : undefined;\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    if (this._touchstartTimeout) {\n                        clearTimeout(this._touchstartTimeout);\n                    }\n                    const DEFAULT_LONGPRESS_DELAY = 500;\n                    this._touchstartTimeout = setTimeout(() => {\n                        this._touchstartTimeout = null;\n                        this.show(undefined, origin);\n                    }, this._defaultOptions?.touchLongPressShowDelay ?? DEFAULT_LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                if (this._touchstartTimeout) {\n                    clearTimeout(this._touchstartTimeout);\n                }\n                this.hide(this._defaultOptions?.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n    /** Updates the tooltip's ARIA description based on it current state. */\n    _syncAriaDescription(oldMessage) {\n        if (this._ariaDescriptionPending) {\n            return;\n        }\n        this._ariaDescriptionPending = true;\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, oldMessage, 'tooltip');\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        if (!this._isDestroyed) {\n            afterNextRender({\n                write: () => {\n                    this._ariaDescriptionPending = false;\n                    if (this.message && !this.disabled) {\n                        this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                    }\n                },\n            }, { injector: this._injector });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.0-rc.0\", ngImport: i0, type: MatTooltip, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.0-rc.0\", type: MatTooltip, isStandalone: true, selector: \"[matTooltip]\", inputs: { position: [\"matTooltipPosition\", \"position\"], positionAtOrigin: [\"matTooltipPositionAtOrigin\", \"positionAtOrigin\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, host: { properties: { \"class.mat-mdc-tooltip-disabled\": \"disabled\" }, classAttribute: \"mat-mdc-tooltip-trigger\" }, exportAs: [\"matTooltip\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.0-rc.0\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-mdc-tooltip-trigger',\n                        '[class.mat-mdc-tooltip-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], positionAtOrigin: [{\n                type: Input,\n                args: ['matTooltipPositionAtOrigin']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    /* Whether the tooltip text overflows to multiple lines */\n    _isMultiline = false;\n    /** Message to display in the tooltip */\n    message;\n    /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n    tooltipClass;\n    /** The timeout ID of any current timer set to show the tooltip */\n    _showTimeoutId;\n    /** The timeout ID of any current timer set to hide the tooltip */\n    _hideTimeoutId;\n    /** Element that caused the tooltip to open. */\n    _triggerElement;\n    /** Amount of milliseconds to delay the closing sequence. */\n    _mouseLeaveHideDelay;\n    /** Whether animations are currently disabled. */\n    _animationsDisabled;\n    /** Reference to the internal tooltip element. */\n    _tooltip;\n    /** Whether interactions on the page should close the tooltip */\n    _closeOnInteraction = false;\n    /** Whether the tooltip is currently visible. */\n    _isVisible = false;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    _onHide = new Subject();\n    /** Name of the show animation and the class that toggles it. */\n    _showAnimation = 'mat-mdc-tooltip-show';\n    /** Name of the hide animation and the class that toggles it. */\n    _hideAnimation = 'mat-mdc-tooltip-hide';\n    constructor() {\n        const animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        this._cancelPendingAnimations();\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            if (this.isVisible()) {\n                this.hide(this._mouseLeaveHideDelay);\n            }\n            else {\n                this._finalizeAnimation(false);\n            }\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() {\n        this._isMultiline = this._isTooltipMultiline();\n        this._markForCheck();\n    }\n    /** Whether the tooltip text has overflown to the next line */\n    _isTooltipMultiline() {\n        const rect = this._elementRef.nativeElement.getBoundingClientRect();\n        return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\n    }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Cancels any pending animation sequences. */\n    _cancelPendingAnimations() {\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = this._hideTimeoutId = undefined;\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        if (this._isVisible !== isVisible) {\n            this._isVisible = isVisible;\n            this._changeDetectorRef.markForCheck();\n        }\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.0-rc.0\", ngImport: i0, type: TooltipComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.1.0-rc.0\", type: TooltipComponent, isStandalone: true, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], ngImport: i0, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mat-mdc-tooltip-surface mdc-tooltip__surface\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mdc-plain-tooltip-container-color, var(--mat-sys-inverse-surface));color:var(--mdc-plain-tooltip-supporting-text-color, var(--mat-sys-inverse-on-surface));border-radius:var(--mdc-plain-tooltip-container-shape, var(--mat-sys-corner-extra-small));font-family:var(--mdc-plain-tooltip-supporting-text-font, var(--mat-sys-body-small-font));font-size:var(--mdc-plain-tooltip-supporting-text-size, var(--mat-sys-body-small-size));font-weight:var(--mdc-plain-tooltip-supporting-text-weight, var(--mat-sys-body-small-weight));line-height:var(--mdc-plain-tooltip-supporting-text-line-height, var(--mat-sys-body-small-line-height));letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, var(--mat-sys-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel{line-height:normal}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"], dependencies: [{ kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.0-rc.0\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, imports: [NgClass], template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mat-mdc-tooltip-surface mdc-tooltip__surface\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mdc-plain-tooltip-container-color, var(--mat-sys-inverse-surface));color:var(--mdc-plain-tooltip-supporting-text-color, var(--mat-sys-inverse-on-surface));border-radius:var(--mdc-plain-tooltip-container-shape, var(--mat-sys-corner-extra-small));font-family:var(--mdc-plain-tooltip-supporting-text-font, var(--mat-sys-body-small-font));font-size:var(--mdc-plain-tooltip-supporting-text-size, var(--mat-sys-body-small-size));font-weight:var(--mdc-plain-tooltip-supporting-text-weight, var(--mat-sys-body-small-weight));line-height:var(--mdc-plain-tooltip-supporting-text-line-height, var(--mat-sys-body-small-line-height));letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, var(--mat-sys-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel{line-height:normal}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"] }]\n        }], ctorParameters: () => [], propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n * @deprecated No longer being used, to be removed.\n * @breaking-change 21.0.0\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        // TODO(crisbeto): these values are based on MDC's CSS.\n        // We should be able to use their styles directly once we land #19432.\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0.8)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => hidden', animate('75ms cubic-bezier(0.4, 0, 1, 1)')),\n    ]),\n};\n\nclass MatTooltipModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.0-rc.0\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.1.0-rc.0\", ngImport: i0, type: MatTooltipModule, imports: [A11yModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.1.0-rc.0\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.0-rc.0\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}